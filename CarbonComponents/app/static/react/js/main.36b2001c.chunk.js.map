{"version":3,"sources":["components/OffensesTable/OffensesTable.js","hooks/useLazyFetch.js","components/OffensesTableTab/OffensesTableTab.js","components/SearchOffensesTab/SearchOffensesTab.js","App.js","reportWebVitals.js","index.js"],"names":["OffensesTable","offenses","className","DataTablePagination","headers","key","header","pageSize","pageSizes","rows","isSelectable","getBaseURL","url","substr","lastIndexOf","useLazyFetch","baseURL","window","location","href","useState","data","setData","loading","setLoading","fetchData","a","axios","method","console","error","OffensesTableTab","setOffenses","useEffect","map","offense","id","magnitude","offenseID","description","starttime","format","start_time","status","formatOffenses","getOffenses","Loading","length","TitleBarModule","title","Button","onClick","undefined","size","kind","SearchOffensesTab","searchID","setSearchID","isInvalidID","setInvalidID","setOffense","onSearchBarSubmit","validateSearchText","text","match","Search","clearButtonLabelText","labelText","onChange","event","target","value","onKeyDown","placeHolderText","submitLabel","disabled","CodeSnippet","showLessText","showMoreText","type","wrapText","JSON","stringify","App","Tabs","Tab","tabIndex","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.36b2001c.chunk.js","sourcesContent":["import { DataTablePagination } from '@carbon/ibm-security';\nimport './OffensesTable.scss';\n\nfunction OffensesTable({ offenses }) {\n    const headers = [\n        {\n            key: 'magnitude',\n            header: 'Magnitude',\n        }, {\n            key: 'offenseID',\n            header: 'ID',\n        }, {\n            key: 'description',\n            header: 'Description',\n        }, {\n            key: 'starttime',\n            header: 'Start Time',\n        }, {\n            key: 'status',\n            header: 'Status',\n        },\n    ];\n\n    return (\n        <div className=\"offenses-table-container\">\n            <DataTablePagination\n                className=\"offenses-table\"\n                headers={headers}\n                pageSize={10}\n                pageSizes={[5, 10, 25, 50]}\n                rows={offenses}\n                isSelectable={false}\n            />\n        </div>\n    );\n}\n\nexport default OffensesTable;\n","import { useState } from 'react';\nimport axios from 'axios';\n\nconst getBaseURL = (url) => {\n    return url.substr(0, url.lastIndexOf('/'));\n};\n\nconst useLazyFetch = (url, baseURL = window.location.href) => {\n    const [data, setData] = useState();\n    const [loading, setLoading] = useState(false);\n\n    const fetchData = async() => {\n        setLoading(true);\n        setData();\n        try {\n            const { data } = await axios({\n                method: 'GET',\n                url,\n                baseURL: getBaseURL(baseURL),\n            });\n            setData(data);\n            setLoading(false);\n        } catch (e) {\n            console.error(e);\n            setLoading(false);\n        }\n    };\n\n    return [fetchData, { data, loading }];\n}\nexport default useLazyFetch;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Loading, TitleBarModule } from '@carbon/ibm-security';\nimport { format } from 'date-fns';\nimport OffensesTable from '../OffensesTable/OffensesTable';\nimport useLazyFetch from '../../hooks/useLazyFetch';\nimport './OffensesTableTab.scss';\n\nconst OffensesTableTab = () => {\n    const [fetchData, { data, loading }] = useLazyFetch(`/offenses?range=items=0-49`);\n    const [offenses, setOffenses] = useState();\n\n    useEffect(() => {\n        const formatOffenses = (offenses) => {\n            const formattedOffenses = offenses.map((offense) => {\n                return {\n                    id: offense.id,\n                    magnitude: offense.magnitude,\n                    offenseID: offense.id,\n                    description: offense.description,\n                    starttime: format(offense.start_time, 'MMM dd, yyyy  hh:mm a'),\n                    status: offense.status,\n                }\n            });\n            return formattedOffenses;\n        };\n\n        if (data?.offenses) {\n            setOffenses(formatOffenses(data.offenses));\n        }\n    }, [data]);\n\n    const getOffenses = async() => {\n        fetchData();\n    };\n\n    const renderEmptyState = () => (\n        <div className=\"offenses-empty-state\">\n            <TitleBarModule title=\"Offenses table\" />\n            <div className=\"empty-state-text\">\n                <p>This tab displays a list of offenses in a table.</p>\n                <p>Click the button below to fetch the last 50 offenses.</p>\n            </div>\n            <Button onClick={() => getOffenses()}>Fetch offenses</Button>\n        </div>\n    );\n\n    return (\n        <>\n            {loading && <Loading />}\n            {!offenses?.length && renderEmptyState()}\n            {offenses?.length &&\n                <div className=\"offenses-tab-container\">\n                    <div>\n                        <TitleBarModule title=\"Offenses table\" />\n                        <div className=\"offenses-text-button-pair\">\n                            <p>The {offenses?.length} most recent offenses are displayed in the table below.</p>\n                            <div>\n                                <Button onClick={() => setOffenses(undefined)} size=\"sm\" kind=\"ghost\">\n                                    Clear table\n                                </Button>\n                                <Button onClick={() => getOffenses()} size=\"sm\" kind=\"ghost\">\n                                    Refresh table\n                                </Button>\n                            </div>\n                        </div>\n                    </div> \n                    <OffensesTable offenses={offenses} />\n                </div>\n            }\n        </>\n    );\n}\n\nexport default OffensesTableTab;\n","import React, { useState, useEffect } from 'react';\nimport { Button, CodeSnippet, Loading, Search, TitleBarModule } from '@carbon/ibm-security';\nimport useLazyFetch from '../../hooks/useLazyFetch';\nimport './SearchOffensesTab.scss'\n\nconst SearchOffensesTab = () => {\n    const [searchID, setSearchID] = useState('');\n    const [isInvalidID, setInvalidID] = useState(false);\n    const [fetchData, { data, loading }] = useLazyFetch(`/offenses/${searchID}`);\n    const [offense, setOffense] = useState();\n\n    useEffect(() => {\n        if (data?.offense) {\n            setOffense(data.offense);\n        }\n    }, [data]);\n\n    const onSearchBarChange = (event) => {\n        setSearchID(event.target.value);\n        validateSearchText(event.target.value);\n    };\n\n    const onSearchBarSubmit = async() => {\n        fetchData();\n    };\n\n    const onSearchBarKeyDown = (event) => {\n        if(event.key === 'Enter') {\n            onSearchBarSubmit();\n        }\n    };\n\n    const validateSearchText = (text) => {\n        if (!text.match(/^[0-9]+$/)) {\n            setInvalidID(true);\n        } else {\n            setInvalidID(false);\n        }\n    };\n\n    const shouldDisableButton = () => {\n        if (searchID === '' || isInvalidID) {\n            return true;\n        }\n\n        return false;\n    }\n\n    return (\n        <>\n            {loading && <Loading />}\n            <TitleBarModule title=\"Search offenses\" />\n            <p>Use the search bar below to fetch an offense by its ID.</p>\n            <div className=\"offenses-searchbar\">\n                <div className=\"offenses-searchbar-inner\">\n                    <Search\n                        className={isInvalidID ? 'searchbar-invalid' : ''}\n                        clearButtonLabelText=\"Clear\"\n                        labelText=\"Label\"\n                        onChange={onSearchBarChange}\n                        onKeyDown={onSearchBarKeyDown}\n                        placeHolderText=\"Enter an offense ID\"\n                        submitLabel=\"Search\"\n                        value={searchID}\n                    />\n                    {isInvalidID && <span className=\"searchbar-invalid-msg\">Offense IDs should contain numerical characters only.</span>}\n                </div>\n                <Button onClick={onSearchBarSubmit} disabled={shouldDisableButton()}>Search</Button>\n            </div>\n            {offense &&\n            <>\n                <h5>Result</h5>\n                <CodeSnippet\n                    showLessText=\"Show less\"\n                    showMoreText=\"Show more\"\n                    type=\"multi\"\n                    wrapText={false}\n                >\n                    <div>\n                        <pre>\n                            {JSON.stringify(offense, null, 2)}\n                        </pre>\n                    </div>\n                </CodeSnippet>\n                </>\n            }\n        </>\n    );\n}\n\nexport default SearchOffensesTab;\n","import React from 'react';\nimport { Tab, Tabs } from '@carbon/ibm-security';\nimport OffensesTableTab from './components/OffensesTableTab/OffensesTableTab';\nimport SearchOffensesTab from './components/SearchOffensesTab/SearchOffensesTab';\nimport './App.scss';\n\nconst App = () =>  {\n    return (\n        <div className=\"app\">\n            <h2>Sample application using Carbon components</h2>\n            <Tabs>\n                <Tab\n                    href=\"#\"\n                    tabIndex={0}\n                    label=\"Offenses table\"\n                >\n                    <OffensesTableTab />\n                </Tab>\n                <Tab\n                    href=\"#\"\n                    tabIndex={1}\n                    label=\"Search offenses\"\n                >\n                    <SearchOffensesTab />\n                </Tab>\n            </Tabs>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}